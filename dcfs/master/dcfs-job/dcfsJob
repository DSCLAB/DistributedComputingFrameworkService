#!/bin/bash
# Distributed Computing Framework Service (DCFS)
# Author: Neo Yang <neoyang@apache.org>

SOURCE="${BASH_SOURCE[0]}"
BIN_DIR="$(cd -P "$(dirname "$SOURCE")" && pwd)"

# DCFS的JAR檔案路徑
JAR_FILE="${BIN_DIR}/dcfsCore.jar"

die() {
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

begins_with_short_option() {
	local first_option all_short_options='nrscfh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# 參數初始值
_positionals=()
_arg_commands=('')
_arg_name="DCFSJob"
declare -l _arg_autoresizing="on"
declare -l _arg_autoscaling="on"
_arg_configpath=
_arg_files=()
declare -l _arg_mode=

print_help() {
	printf '%s\n' "DCFS JobTool"
	printf 'Usage: %s [-n|--name <arg>] [-r|--(no-)autoresizing] [-s|--(no-)autoscaling] [-c|--configpath <arg>] [-f|--files <arg>] [-h|--help] [--] <mode> <datasource> <commands-1> [<commands-2>] ... [<commands-n>] ...\n' "$0"
	printf '\t%s\n' "<mode>: Computing Mode (support 'single' or 'watch')"
	printf '\t%s\n' "<datasource>: Data Source"
	printf '\t%s\n' "<commands>: Run Commands (separate multiple commands with blanks)"
	printf '\t%s\n' "-n, --name: Job Name (default: 'DCFSJob')"
	printf '\t%s\n' "-r, --autoresizing, --no-autoresizing: Auto Resizing (on by default)"
	printf '\t%s\n' "-s, --autoscaling, --no-autoscaling: Auto Scaling (on by default)"
	printf '\t%s\n' "-c, --configpath: Config Path (no default)"
	printf '\t%s\n' "-f, --files: Attach File (empty by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
	_positionals_count=0
	while test $# -gt 0; do
		_key="$1"
		if test "$_key" = '--'; then
			shift
			test $# -gt 0 || break
			_positionals+=("$@")
			_positionals_count=$((_positionals_count + $#))
			shift $(($# - 1))
			_last_positional="$1"
			break
		fi
		case "$_key" in
		-n | --name)
			test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
			_arg_name="$2"
			shift
			;;
		--name=*)
			_arg_name="${_key##--name=}"
			;;
		-n*)
			_arg_name="${_key##-n}"
			;;
		-r | --no-autoresizing | --autoresizing)
			_arg_autoresizing="on"
			test "${1:0:5}" = "--no-" && _arg_autoresizing="off"
			;;
		-r*)
			_arg_autoresizing="on"
			_next="${_key##-r}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-s | --no-autoscaling | --autoscaling)
			_arg_autoscaling="on"
			test "${1:0:5}" = "--no-" && _arg_autoscaling="off"
			;;
		-s*)
			_arg_autoscaling="on"
			_next="${_key##-s}"
			if test -n "$_next" -a "$_next" != "$_key"; then
				{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
			fi
			;;
		-c | --configpath)
			test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
			_arg_configpath="$2"
			shift
			;;
		--configpath=*)
			_arg_configpath="${_key##--configpath=}"
			;;
		-c*)
			_arg_configpath="${_key##-c}"
			;;
		-f | --files)
			test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
			_arg_files+=("$2")
			shift
			;;
		--files=*)
			_arg_files+=("${_key##--files=}")
			;;
		-f*)
			_arg_files+=("${_key##-f}")
			;;
		-h | --help)
			print_help
			exit 0
			;;
		-h*)
			print_help
			exit 0
			;;
		*)
			_last_positional="$1"
			_positionals+=("$_last_positional")
			_positionals_count=$((_positionals_count + 1))
			;;
		esac
		shift
	done
}

handle_passed_args_count() {
	local _required_args_string="'mode', 'datasource' and 'commands'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require at least 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}

assign_positional_args() {
	local _positional_name _shift_for=$1
	_positional_names="_arg_mode _arg_datasource _arg_commands "
	_our_args=$((${#_positionals[@]} - 3))
	for ((ii = 0; ii < _our_args; ii++)); do
		_positional_names="$_positional_names _arg_commands[$((ii + 1))]"
	done

	shift "$_shift_for"
	for _positional_name in ${_positional_names}; do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# 包裝成執行指令
exec_command=()

# DCFS Tool Class
TOOL_CLASS="com.nlab.dcfs.tools.JobTool"

if [[ "${_arg_mode,,}" != "single" ]] && [[ "${_arg_mode,,}" != "watch" ]]; then
	die "Unsupported mode \`$_arg_mode\`."
fi

if [ -z "$HADOOP_HOME" ]; then
	HADOOP_EXEC="hadoop"
else
	HADOOP_EXEC="${HADOOP_HOME}/bin/hadoop"
fi
exec_command+=("$HADOOP_EXEC")

if [ -f "$JAR_FILE" ]; then
	exec_command+=("jar")
	exec_command+=("$JAR_FILE")
	_arg_files+=("$JAR_FILE")
fi

exec_command+=("$TOOL_CLASS")

if [ -n "$_arg_name" ]; then
	exec_command+=("--name")
	exec_command+=("$_arg_name")
fi
if [ -n "$_arg_configpath" ]; then
	exec_command+=("--configpath")
	exec_command+=("$_arg_configpath")
fi
if [ -n "${_arg_files[*]}" ]; then
	exec_command+=("--files")
	exec_command+=("${_arg_files[*]}")
fi

exec_command+=("--mode")
exec_command+=("$_arg_mode")

exec_command+=("--autoscaling")
exec_command+=("$_arg_autoscaling")

exec_command+=("--autoresizing")
exec_command+=("$_arg_autoresizing")

exec_command+=("--datasource")
exec_command+=("$_arg_datasource")

exec_command+=("--commands")
exec_command+=("${_arg_commands[*]}")

dcfs_command="${exec_command[*]}"
# /opt/hadoop-3.3.4/bin/hadoop jar /dcfs-job/dcfsCore.jar com.nlab.dcfs.tools.JobTool --name DCFSJob --configpath /dcfs-job/dcfs-config.xml --files /dcfs-job/dcfsCore.jar --mode watch --autoscaling on --autoresizing on --datasource hds:///join/json --commands python3 /dcfs-share/dcfs-run/main.py dcfsInput
echo $dcfs_command
exec $dcfs_command